name: Build Book

on:
  # Only run manually via workflow_dispatch
  workflow_dispatch:
    inputs:
      scheme:
        description: 'Pronunciation scheme to use'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - cla
          - koi1
          - koi2
          - byz1
          - byz2
      create_release:
        description: 'Create a GitHub Release with the build artifacts'
        required: false
        default: true
        type: boolean

jobs:
  # Job to determine which schemes to build
  determine-schemes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          if [[ "${{ github.event.inputs.scheme }}" == "all" || "${{ github.event.inputs.scheme }}" == "" || "${{ github.event_name }}" != "workflow_dispatch" ]]; then
            echo "matrix={\"scheme\":[\"cla\",\"koi1\",\"koi2\",\"byz1\",\"byz2\"]}" >> $GITHUB_OUTPUT
          else
            echo "matrix={\"scheme\":[\"${{ github.event.inputs.scheme }}\"]}" >> $GITHUB_OUTPUT
          fi

  # Main build job
  build:
    needs: determine-schemes
    runs-on: ubuntu-latest

    strategy:
      matrix: ${{ fromJson(needs.determine-schemes.outputs.matrix) }}
      fail-fast: false

    env:
      SCHEME_NAME: ${{ matrix.scheme == 'cla' && 'Classical' || matrix.scheme == 'koi1' && 'Early Koine' || matrix.scheme == 'koi2' && 'Late Koine' || matrix.scheme == 'byz1' && 'Middle Byzantine' || matrix.scheme == 'byz2' && 'Late Byzantine' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Lua
        run: |
          sudo apt-get update
          sudo apt-get install -y lua5.3
          sudo ln -sf /usr/bin/lua5.3 /usr/bin/lua

      - name: Install Pandoc
        run: |
          sudo apt-get install -y pandoc

      - name: Install LaTeX
        run: |
          sudo apt-get install -y texlive-xetex texlive-fonts-recommended texlive-fonts-extra

      - name: Install PDF tools
        run: |
          sudo apt-get install -y ghostscript pdftk poppler-utils

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install argparse

      - name: Build PDF
        run: |
          bash scripts/pdf_pron.sh --scheme ${{ matrix.scheme }}
          mv docs/lgpsi_pron.pdf docs/lgpsi_${{ matrix.scheme }}.pdf

      - name: Build HTML
        run: |
          bash scripts/html_pron.sh --scheme ${{ matrix.scheme }}

      - name: Build EPUB
        run: |
          bash scripts/ebook_pron.sh --scheme ${{ matrix.scheme }}
          mv docs/lgpsi_pron.epub docs/lgpsi_${{ matrix.scheme }}.epub

      - name: Upload PDF artifact
        uses: actions/upload-artifact@v4
        with:
          name: lgpsi-${{ matrix.scheme }}-pdf
          path: docs/lgpsi_${{ matrix.scheme }}.pdf
          retention-days: 7

      - name: Upload EPUB artifact
        uses: actions/upload-artifact@v4
        with:
          name: lgpsi-${{ matrix.scheme }}-epub
          path: docs/lgpsi_${{ matrix.scheme }}.epub
          retention-days: 7

      - name: Prepare HTML artifacts
        run: |
          # Create a directory for HTML files with CSS and fonts
          mkdir -p html_output
          # Copy HTML files
          cp docs/*.html html_output/
          # Copy CSS file
          cp docs/style_pron.css html_output/
          # Copy font files
          cp docs/*.ttf html_output/
          echo "HTML files prepared with CSS and fonts"

      - name: Upload HTML artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lgpsi-${{ matrix.scheme }}-html
          path: html_output/
          retention-days: 7

      - name: Summary
        run: |
          echo "## Build Summary for ${{ env.SCHEME_NAME }} (${{ matrix.scheme }}) Pronunciation" >> $GITHUB_STEP_SUMMARY
          echo "✅ PDF: lgpsi_${{ matrix.scheme }}.pdf" >> $GITHUB_STEP_SUMMARY
          echo "✅ EPUB: lgpsi_${{ matrix.scheme }}.epub" >> $GITHUB_STEP_SUMMARY
          echo "✅ HTML files: Generated with CSS and font files" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Download the artifacts from the GitHub Actions run to access these files." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Note for HTML files**: The HTML artifact includes:" >> $GITHUB_STEP_SUMMARY
          echo "- HTML files with pronunciation" >> $GITHUB_STEP_SUMMARY
          echo "- style_pron.css stylesheet" >> $GITHUB_STEP_SUMMARY
          echo "- Required font files (NotoSansDisplay_Condensed-Regular.ttf and SBLGreek.ttf)" >> $GITHUB_STEP_SUMMARY

      # Create a zip file of the HTML files for the release
      - name: Create HTML zip archive
        if: github.event.inputs.create_release == 'true'
        run: |
          cd html_output
          zip -r ../lgpsi_${{ matrix.scheme }}_html.zip .
          cd ..

      # Upload the zip file as an artifact for the release job
      - name: Upload release artifacts
        if: github.event.inputs.create_release == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ matrix.scheme }}
          path: |
            docs/lgpsi_${{ matrix.scheme }}.pdf
            docs/lgpsi_${{ matrix.scheme }}.epub
            lgpsi_${{ matrix.scheme }}_html.zip
          retention-days: 1

  # Create a GitHub Release with all the build artifacts
  create-release:
    needs: build
    if: github.event.inputs.create_release == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all release artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
          pattern: release-artifacts-*
          merge-multiple: false

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: LGPSI Build ${{ steps.date.outputs.date }}
          tag_name: build-${{ steps.date.outputs.date }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            release-artifacts/release-artifacts-cla/docs/lgpsi_cla.pdf
            release-artifacts/release-artifacts-cla/docs/lgpsi_cla.epub
            release-artifacts/release-artifacts-cla/lgpsi_cla_html.zip
            release-artifacts/release-artifacts-koi1/docs/lgpsi_koi1.pdf
            release-artifacts/release-artifacts-koi1/docs/lgpsi_koi1.epub
            release-artifacts/release-artifacts-koi1/lgpsi_koi1_html.zip
            release-artifacts/release-artifacts-koi2/docs/lgpsi_koi2.pdf
            release-artifacts/release-artifacts-koi2/docs/lgpsi_koi2.epub
            release-artifacts/release-artifacts-koi2/lgpsi_koi2_html.zip
            release-artifacts/release-artifacts-byz1/docs/lgpsi_byz1.pdf
            release-artifacts/release-artifacts-byz1/docs/lgpsi_byz1.epub
            release-artifacts/release-artifacts-byz1/lgpsi_byz1_html.zip
            release-artifacts/release-artifacts-byz2/docs/lgpsi_byz2.pdf
            release-artifacts/release-artifacts-byz2/docs/lgpsi_byz2.epub
            release-artifacts/release-artifacts-byz2/lgpsi_byz2_html.zip


